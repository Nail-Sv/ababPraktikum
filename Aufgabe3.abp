REPORT z_west13_helloworld.


PARAMETERS: auskette TYPE string,
            zumask   TYPE string.


DATA: ergebnis     LIKE auskette,
      lengthkette  TYPE i,
      lenghmask    TYPE i,
      index        TYPE i,
      naechstesymb TYPE string,
      haelfte1     TYPE string,
      haelfte2     TYPE string.


lengthkette = strlen( auskette ).
lenghmask = strlen( zumask ).


* Die Anzahl der Wiederholungen der äußeren Schleife hängt davon ab,
* wie viele Buchstaben ersetzt werden müssen. Die innere Schleife
* prüfft jeweils einen Buchstaben über die gesamte Zeile. Wenn das
* gewünschte Zeichen gefunden wurde, wird dieser Teil durch CONCATENATE
* durch ein Sternchen ersetzt

WHILE index < lenghmask.
  naechstesymb = zumask+index(1).

  DO lengthkette TIMES.
    IF auskette CA naechstesymb.
      SPLIT auskette AT naechstesymb INTO haelfte1 haelfte2.
      CONCATENATE haelfte1 '*' haelfte2 INTO ergebnis.
      auskette = ergebnis.
    ELSEIF auskette NA naechstesymb.
      ergebnis = auskette.
    ENDIF.
  ENDDO.

  ADD 1 TO index.
ENDWHILE.


WRITE / ergebnis.







REPORT z_west13_helloworld.

*REPORT Z_WEST13_AUFGABE3.
*Parameters eingegeben
PARAMETERS : auskette TYPE string,
             zumask   TYPE string.

*Ergebniss Definieren
DATA : ergebnis LIKE auskette,
       maske    TYPE c VALUE '*'.

*es wurde verarbeitungsfunktion aus der Uebung 3, Seite 21 verwendet
ergebnis = replace( val = auskette sub = zumask with = maske case = abap_true occ = 0 ).

*Ergebniss Ausgabe
WRITE: ergebnis.





REPORT z_west13_helloworld.

*REPORT Z_WEST13_AUFGABE3.
*Zeichenkette einlesen
PARAMETERS : auskette TYPE string,
             zumask   TYPE string.

*Ergebniss Definieren
DATA : ergebnis LIKE auskette,
       maske    TYPE c VALUE '*'.

ergebnis = translate( val = auskette from = zumask to = maske ).

*Ergebniss Ausgabe
WRITE: ergebnis.
